import Data.List
import LTS    
import Test.QuickCheck

-- Implementation of after
-- Parameters: IOLTS and label
-- We must follow the label from the initial state
-- then when we have traversed the path, we can append q' 
-- of the last transition (q -> q') we found 
--
                
getQ' :: [LabeledTransition] -> Label -> State -> [State]
getQ' xs l initialState = [i | (_,_,i) <- xs']
        where
                xs' = (filter (\(x,y,_) -> (y == l) && (x == initialState)) xs)

after :: LTS -> [Label] -> Bool 
r `after` l =  trace (show yy) True 
        where 
                (states, labels, transitions, initialState) = r
                label = head l
                qPrimes = getQ' transitions label initialState 
                yy = map (getQ' transitions label) qPrimes

tt = tretmanR `after` ["but"]
